 -BUSCA COMPLETA
 COMBINACOES
 
 #include <bits/stdc++.h>

using namespace std;

void process_combinations(int n, int m, function<void(const vector<int>&)> process)
{
    // ns = { 1, 1, ..., 1, 0, 0, ..., 0 }, m 1s, (n - m) zeros
    vector<int> ns(m, 1);
    ns.resize(n);

    // As combinações são geradas em ordem lexicográfica
    // ns[i] = 1 significa que (i + 1) pertence a combinação
    do {
        process(ns);
    } while (prev_permutation(ns.begin(), ns.end()));
}

int main()
{
    int N, M;
    cin >> N >> M;

    process_combinations(N, M, [N](const vector<int>& p) {
        cout << "( ";

        for (int i = 0; i < N; ++i)
            if (p[i])
                cout << i + 1 << " ";

        cout << ")\n";
    });

    return 0;
}

COMBINCOES COM REPETICAO

#include <bits/stdc++.h>

using namespace std;

vector<vector<int>> combinations_with_repetition(int N, int M)
{
    vector<vector<int>> cs;
    vector<int> xs(M, 1);
    int pos = M - 1;

    while (true)
    {
        cs.push_back(xs);

        xs[pos]++;

        while (pos > 0 and xs[pos] > N) {
            --pos;
            xs[pos]++;
        }

        if (pos == 0 and xs[pos] > N)
            break; 

        for (int i = pos + 1; i < M; ++i)
            xs[i] = xs[pos];

        pos = M - 1;
    } 

    return cs;
}

int main() {
    int N = 5, M = 3;
    auto cs = combinations_with_repetition(N, M);

    for (auto xs : cs)
        for (int i = 0; i < M; ++i)
            cout << xs[i] << (i + 1 == M ? '\n' : ' ');
}

PERMUTACOES

#include <bits/stdc++.h>

using namespace std;

void
process_permutations(size_t n, function<void(const vector<int>&)> process)
{
    vector<int> ns(n);

    // ns = { 1, 2, 3, ..., n }
    iota(ns.begin(), ns.end(), 1);

    // Para gerar todas as permutações com next_permutation(), o
    // vector ns deve estar inicialmente ordenado
    do {
        process(ns);
    } while (next_permutation(ns.begin(), ns.end()));
}

int main()
{
    int N;
    cin >> N;

    process_permutations(N, [](const vector<int>& p) {
        cout << "( ";

        for (const auto x : p)
            cout << x << " ";

        cout << ")\n";
    });

    return 0;
}

- BACKTRAKING 
SUB SETS

#include <bits/stdc++.h>

using namespace std;

bool is_solution(int i, int N) { return i == N; }

void process_solution(const vector<int>& xs)
{
    cout << "{ ";

    for (auto x : xs)
        cout << x << ' ';

    cout << "}\n";
}

vector<int> candidates(int i, const vector<int>& as)
{
    return { as[i] };
}

void backtracking(vector<int>& xs, int i, int N, const vector<int>& as)
{
    if (is_solution(i, N))
        process_solution(xs);
    else
    {
        auto cs = candidates(i, as);

        for (auto c : cs)
        {
            // Segue sem escolher c
            backtracking(xs, i + 1, N, as);

            // Segue escolhendo c
            xs.push_back(c);
            backtracking(xs, i + 1, N, as);
            xs.pop_back();
        }
    }
}

int main()
{
    vector<int> as { 2, 3, 5, 7, 11 }, xs;

    backtracking(xs, 0, (int) as.size(), as);

    return 0;
} 

- TWO POINTERS
2SUM

#include <bits/stdc++.h>

using namespace std;

bool _2sum(int N, int S, vector<int>& xs)
{
    sort(xs.begin(), xs.end());

    int L = 0, R = N - 1;

    // A solução exige dois elementos distintos de xs
    while (L < R) {
        while (R > L and xs[L] + xs[R] > S)
            --R;

        if (R <= L)
            break;

        if (xs[L] + xs[R] == S)
            return true;

        ++L;
    }

    return false;
}

int main()
{
    vector<int> xs { 1, -2, 5, 8, -3, 7, -5 };
    int N = (int) xs.size();

    cout << _2sum(N, 0, xs) << endl;
    cout << _2sum(N, 1, xs) << endl;
    cout << _2sum(N, 4, xs) << endl;
    cout << _2sum(N, 14, xs) << endl;

    return 0;
}

BUSCA BINARIA
int binary_search(int x, const vector<int>& xs)
{
    auto a = 0ul, b = xs.size() - 1;

    while (a <= b)
    {
        auto m = a + (b - a)/2;

        if (xs[m] == x)
            return m;
        else if (xs[m] > x)
            b = m - 1;
        else
            a = m + 1;
    }

    return -1;
}

STRING EM NUMEROS
/*
 * Em C++, também é possível tratar um vetor de string com elementos inteiros normalmente
 * */

#include <iostream>
#include <string>

using namespace std;

int main(){
	string s(5, ' ');

	for(int i=0; i<5; i++){
		cin >> s[i];
	}	

	for(int i=0; i<5; i++){ //Converte string em números
		s[i] -= '0';
	}
	
	for(int i=0; i<5; i++){
		cout << s[i] << " ";
	}
	cout << endl;

	return 0;
}

EXCLUIR ESPACOS EM BRACO

#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string erasing(const string &s);

int main(){
	string s;

	getline(cin, s);

	s = erasing(s);

	cout << s;

	cout << endl;
	return 0;
}

string erasing(const string &s){
	string result = s;

	result.erase(remove_if(result.begin(), result.end(), ::isspace), result.end());

	return result;
}

STRING CAIXA ALTA
#include <iostream>
#include <string>

using namespace std;

int main(){
	string s, result;
	cin >> s;
	
	for(size_t i=0; i<s.size(); i++){
		if(s[i] >= 'A' and s[i] <= 'Z'){
			s[i] = s[i] - ('A' - 'a');
			result.push_back(s[i]);
		}else if(s[i] >= 'a' and s[i] <= 'z'){
			result.push_back(s[i]);
		}
	}
	for(auto e : result)
		cout << e;

	cout << endl;
	return 0;
}

ORDENA VETOR
// C++ program to sort a vector in non-decreasing
// order.
#include <bits/stdc++.h>
using namespace std;

int main()
{
    vector<int> v{ 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 };

    sort(v.begin(), v.end());

    cout << "Sorted \n";
    for (auto x : v)
        cout << x << " ";

    return 0;
}

IOTA
#include <iostream>
#include <vector>
#include <numeric>

using namespace std;

int main(){
	vector<int> v(5);

	iota(v.begin(), v.end(), 3);

	for(auto e : v)
		cout << e << " ";

	cout << endl;
	return 0;
}
